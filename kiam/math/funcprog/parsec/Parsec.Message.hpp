#pragma once

_PARSEC_BEGIN

/*
-- | This abstract data type represents parse error messages. There are
-- four kinds of messages:
--
-- >  data Message = SysUnExpect String
-- >               | UnExpect String
-- >               | Expect String
-- >               | Message String
--
-- The fine distinction between different kinds of parse errors allows
-- the system to generate quite good error messages for the user. It
-- also allows error messages that are formatted in different
-- languages. Each kind of message is generated by different combinators:
--
--     * A 'SysUnExpect' message is automatically generated by the
--       'Text.Parsec.Combinator.satisfy' combinator. The argument is the
--       unexpected input.
--
--     * A 'UnExpect' message is generated by the 'Text.Parsec.Prim.unexpected'
--       combinator. The argument describes the
--       unexpected item.
--
--     * A 'Expect' message is generated by the 'Text.Parsec.Prim.<?>'
--       combinator. The argument describes the expected item.
--
--     * A 'Message' message is generated by the 'fail'
--       combinator. The argument is some general parser message.

data Message = SysUnExpect !String -- @ library generated unexpect
             | UnExpect    !String -- @ unexpected something
             | Expect      !String -- @ expecting something
             | Message     !String -- @ raw message
    deriving ( Typeable )

instance Enum Message where
    fromEnum (SysUnExpect _) = 0
    fromEnum (UnExpect    _) = 1
    fromEnum (Expect      _) = 2
    fromEnum (Message     _) = 3
    toEnum _ = error "toEnum is undefined for Message"
*/

enum _Message {
    SysUnExpect,    // @ library generated unexpect
    UnExpect,       // @ unexpected something
    Expect,         // @ expecting something
    Message_        // @ raw message
};

struct Message
{
    Message(_Message type, std::string const& msg) : type(type), msg(msg){}

    _Message type;
    _FUNCPROG::String msg;
};

/*
-- < Return 'True' only when 'compare' would return 'EQ'.

instance Eq Message where

    m1 == m2 = fromEnum m1 == fromEnum m2

*/
inline bool operator==(Message const& l, Message const& r){
    return l.type == r.type;
}

inline bool operator!=(Message const& l, Message const& r){
    return !(l == r);
}

/*
-- < Compares two error messages without looking at their content. Only
-- the constructors are compared where:
--
-- > 'SysUnExpect' < 'UnExpect' < 'Expect' < 'Message'

instance Ord Message where
    compare msg1 msg2 = compare (fromEnum msg1) (fromEnum msg2)
*/
inline bool operator<(Message const& l, Message const& r){
    return l.type < r.type;
}

/*
-- | Extract the message string from an error message

messageString :: Message -> String
messageString (SysUnExpect s) = s
messageString (UnExpect    s) = s
messageString (Expect      s) = s
messageString (Message     s) = s
*/
inline _FUNCPROG::String messageString(Message const& m){
    return m.msg;
}

_PARSEC_END

namespace std {
    inline ostream& operator<<(ostream& os, _PARSEC::_Message type){
        switch (type){
        case _PARSEC::SysUnExpect: return os << "SysUnExpect";
        case _PARSEC::UnExpect: return os << "UnExpect";
        case _PARSEC::Expect: return os << "Expect";
        case _PARSEC::Message_: return os << "Message";
        default: assert(false); return os;
        }
    }

    inline ostream& operator<<(ostream& os, _PARSEC::Message const& msg){
        return os << msg.type << ' ' << msg.msg;
    }
}

